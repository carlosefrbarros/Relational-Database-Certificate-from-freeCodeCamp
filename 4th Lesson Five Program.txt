#Learn Bash Scripting by Building Five Programs

The first thing you need to do is start the terminal. Do that by clicking the "hamburger" menu at the top left of the screen, going to the "terminal" section, and clicking "new terminal". Once you open a new one, type echo hello bash into the terminal and press enter.

echo hello bash

You can run commands in the terminal or put them in a file to be run as a script. You will be making five small programs to learn some scripting. The first one will be a "questionnaire". Use the touch command to create questionnaire.sh in the project folder.

touch questionnaire.sh

To start, open the file in the main editor by clicking the filename in the left side panel.
Then, add the text echo hello questionnaire at the top of the file.

echo hello questionnaire

Your script has one command. Run it with sh questionnaire.sh to see what happens. sh stands for shell.

sh questionnaire.sh

Using sh to run your script uses the shell interpreter. Run your script again with bash questionnaire.sh to use the bash interpreter. bash stands for bourne-again shell.

bash questionnaire.sh

The output was the same. There are many interpreters which may not give the output you expect. Find out where the bash interpreter is located by entering which bash in the terminal.

which bash

That's the absolute path to the bash interpreter. You can tell your program to use it by placing a shebang at the very top of the file like this: #!<path_to_interpreter>. Add a shebang at the very top of your file, the one you want looks like this: #!/bin/bash.

#!/bin/bash

Now, instead of using sh or bash to run your script. You can run it by executing the file and it will default to bash. Run your script by executing it with ./questionnaire.sh

./questionnaire.sh

You should have got a permission denied message because you don't have permissions to execute the script. List what's in the project folder in long list format with ls -l to see the file permissions.

ls -l

Next to your file is -rw-r--r--. All but the first character (-) describe permissions different users have with the file. r means read, w means write, x means execute. I don't see an x anywhere, so nobody can execute it. Enter chmod +x questionnaire.sh in the terminal to give everyone executable permissions.

chmod +x questionnaire.sh

List what's in the folder again with ls -l to see the new permissions.

ls -l

The x was added by each type of user to denote that anyone can execute the file. Run your file again by executing it with ./questionnaire.sh.

./questionnaire.sh

Now it works. In your script, you can add any commands that you would be able to enter in the terminal. Test this by adding the ls -l command below your other command.

ls -l

Run the script by executing it again.

./questionnaire.sh

Your script printed the result of the two commands as if you entered them in the terminal. Delete everything but the shebang from your file so you can start making the questionnaire.

Bash has variables, functions, and other things you might be familiar with. You can create a variable with VARIABLE_NAME=VALUE. There cannot be any spaces around the equal (=) sign. If a variable has any spaces in it, place double quotes around it. Create a variable named QUESTION1 and set it's value to "What's your name?".

QUESTION1="What's your name?"

To use a variable, place $ in front of it like this: $VARIABLE_NAME. Shell scripts run from top to bottom, so you can only use variable below where it's created. Use echo to print your variable.

echo $QUESTION1

Run the file like you did before to see if it worked.

./questionnaire.sh

The question was printed. Next, you want to be able to accept input from a user. You can do that with read like this: read VARIABLE_NAME. This will get user input and store it into a new variable. After you print the question, use read to get input and store it in a variable named NAME.

read NAME

At the bottom of your script, use echo to print Hello <name>. to the terminal.

echo Hello $NAME.

Run the file again. Type your name and press enter after it asks for it.

./questionnaire.sh

Right below your first variable, create another one named QUESTION2. Set the value to, Where are you from?. Make sure to put it in double quotes.

QUESTION2="Where are you from?"

After your read command, use your new variable to print the next question.

echo $QUESTION2

Below where the second question is printed, use read to get input from the user into a variable named LOCATION.

Change the existing response to Hello <name> from <location>..

echo Hello $NAME from $LOCATION.

Run the script and enter values when it is waiting for input.

./questionnaire.sh

It's looking good. I want a title to appear when the program first starts. Use echo to print ~~ Questionnaire ~~ before anything else is printed.

echo ~~ Questionnaire ~~

Run the script and enter values until it is done again so you can see what the title looks like.

./questionnaire.sh

It would be nice if there was some empty lines around the title. You've probably used the --help flag before, see if you can use it with echo to try and find a way to add empty lines.

echo --help

That didn't work as I hoped. Another way to find information about a command is with man. It stands for manual and you can use it like this: man <command>. See if there's a manual for echo.

man echo


At the top of the menu, the -e option looks promising. And the \n below it says new line. You should take a look at those. In your script, change the title to echo -e \n~~ Questionnaire ~~\n to see if that prints the empty lines.

echo -e \n~~ Questionnaire ~~\n

Run it to see if it worked. You can press ctrl+c to close the program after it starts if you don't want to enter values.

./questionnaire.sh

It didn't print the empty lines. echo will only print empty lines if the value is enclosed in quotes. Place double quotes around the title that gets printed to see if it works.

echo -e "\n~~ Questionnaire ~~\n"

Run your script again to see if that fixed it.

./questionnaire.sh

Now it's working ðŸ˜„ Create a QUESTION3 variable next to the other two, set it's value to "What's your favorite coding website?"

QUESTION3="What's your favorite coding website?"

Use echo to print the third question after you read the LOCATION.

echo $QUESTION3

After the question you just printed, add code to read input into a variable named WEBSITE.

read WEBSITE

Change the echo command of the response to print this sentence instead: Hello <name> from <location>. I learned that your favorite coding website is <website>!.

echo Hello $NAME from $LOCATION. I learned that your favorite coding website is $WEBSITE!

Run the script and enter values when the program is waiting. Let's see the final output.

./questionnaire.sh

One last thing. Change that final response to print an empty line at the beginning of the sentence.

echo -e "\nHello $NAME from $LOCATION. I learned that your favorite coding website is $WEBSITE!"

Run it one last time and enter values when it asks to see if you like how it looks.

./questionnaire.sh

It looks good. I think you are done with that script for now. The next program will be countdown timer. Use the touch command to create a new file named countdown.sh in your project folder.

touch countdown.sh

Give your file executable permissions so you can run it like the other one. It's the chmod command with the +x flag.

chmod +x countdown.sh

You want to use the bash interpreter again. Add a shebang at the top of your new file to denote that.

#!/bin/bash

Comments in bash look like this: # <comment>. Add a comment below the shebang that says Program that counts down to zero from a given argument so people know what it does. Note that the shebang is a special case and is not treated like a comment.

# Program that counts down to zero from a given argument

Programs can take arguments. You can access them a few different ways with $. Add echo $* in your script to print all arguments passed to it.

echo $*

Execute your script with ./countdown.sh.

./countdown.sh

Nothing was printed. Run your script again, but this time add three arguments to the command; arg1, arg2, and arg3. Place them after the command with a space before each one.

./countdown.sh arg1 arg2 arg3

$* printed all the arguments passed to your script. To access any one of them, use $<number>. arg2 could have been accessed with $2. Change your script to echo the first argument instead of all the arguments.

echo $1

Run your file with ./countdown.sh arg1 arg2 arg3 again.

./countdown.sh arg1 arg2 arg3

Now it just prints the first argument. Your program will accept an argument to count down from. You will test it with an if statement to make sure it's a positive integer. I wonder what that syntax would look like. Type help in the terminal to see if you can find anything.

help

This is a list of built-in commands. You should look over it, some of them may look familiar. I see echo in there. Another one is if. See if you can find out more about it by checking its man page.

man if

I guess there isn't a man page for it. At the top of the help screen, I noticed you can use help <command> to find out more. Yet another way to find out about a command ðŸ˜¥ See if you can find out more about if with that method.

help if

The syntax is at the top, not all of it is required. Here's another example:
if [[ CONDITION ]]
then
  STATEMENTS
fi
Remove the echo $1 in your script and add an if condition that checks if [[ $1 == arg1 ]]. In its then area, use echo to print true to the screen. There must be spaces on the inside of the brackets ([[ ... ]]) and around the operator (==).

if [[ $1 == arg1 ]]
then
  echo true
fi

Notice that the end of the syntax is fi (if backwards). It should print true if you pass arg1 to your script now. Run the script with arg1 as the only argument.

./countdown.sh arg1

The if condition worked, it printed true. Run it again with anything except arg1 as the first argument.

./countdown.sh arg2


Nothing was printed. One of the optional parts of if was an else area. You can use it like this:
if [[ CONDITION ]]
then
  STATEMENTS
else
  STATEMENTS
fi
Add an else to your existing if condition. Use echo to print false if the condition fails.

if [[ $1 == arg1 ]]
then
  echo true
else
  echo false
fi

Run the script again and use anything except arg1 as the only argument.

./countdown.sh arg2

Now it printed false. Your program is expecting an integer to count down from as its argument. You can compare integers inside the brackets ([[ ... ]]) of your if with -eq (equal), -ne (not equal), -lt (less than), -le (less than or equal), -gt (greater than), -ge (greater than or equal). Change your if condition to check if your first argument is less than 5.

if [[ $1 -lt 5 ]]
then
  echo true
else
  echo false
fi

Run the script again and use 4 as a first argument to make sure it's working.

./countdown.sh 4

It printed true since your argument was less than 5. Run it again with 5 as the argument.

./countdown.sh 5

As expected, that printed false. Take a look at that help menu again. I want to see if we can find out more about how these expressions work.

help

Near the top left, it says [[ expression ]]. Those look like the double brackets you are using. See if you can get more info about that with the help command like you did with help if.

help [[ expression ]]

It might not be a bad idea to read that. Looks like you can use some, probably familiar, things like !, &&, and || to compare multiple expressions. There's also == and != operators for an individual expression. It says something about the test built-in command. See if you can bring up the help menu for that.

help test

That's what I was looking for. At the top are some file operators. There's some string and other operators as well. You should take a look at them. Near the bottom, are the arithmetic operators you used with your if condition. Change the condition in your script to check if the first argument is less than or equal to 5.

if [[ $1 -le 5 ]]
then
  echo true
else
  echo false
fi

Run the script and use 5 as a first argument again.

./countdown.sh 5

Now it prints true. Remember I said any command can run in the terminal or a script. Try running an expression right in the terminal by entering [[ 4 -le 5 ]] in it.

[[ 4 -le 5 ]]

Nothing happened? Each command has an exit status that can be accessed with $?. View the exit status of the last command with echo $?.

echo $?

The exit status of 0 means it was true, 4 is indeed less or equal to 5. Try it again with [[ 4 -ge 5 ]].

[[ 4 -ge 5 ]]

Use echo to view the exit status of the command you just entered.

echo $?

It printed 1 this time for false. You can separate commands on a single line with ;. Enter your last two commands on one line like this: [[ 4 -ge 5 ]]; echo $?. It will run the expression, then print the exit status of it since it was the last command.

[[ 4 -ge 5 ]]; echo $?

It's still false. Using the same syntax of [[ ... ]]; echo$?, check if 10 is not equal to 5 and print the exit status of the expression on one line.

[[ 10 -ne 5 ]]; echo $?

You can think of an exit status of 0 as true. But it means that the command had zero errors. All commands have an exit status. Using the same syntax, enter bad_command; and check its exit status on a single line.

bad_command; echo $?

command not found, with an exit status of 127. Anything but 0 means there was an error with the command. bad_command didn't exist. Try it again with ls.

ls; echo $?

The command executed as expected and there were zero errors. So it gave you an exit status of 0. Try it again with ls -y.

ls -y; echo $?

The -y flag doesn't work with ls so it gave you an exit status other than 0, meaning that the command was unsuccessful. View the help menu of the test command again, I want to see what else is in that list.

help test

You tried a few of the arithmetic operators, those work for integers. Try one of the file operators. The first one on the list checks if a file exists. Type [[ -a countdown.sh ]]; echo $? in the terminal to see if your file exists.

[[ -a countdown.sh ]]; echo $?

The file must exist. It's checking the folder the command is entered from. Try it again with bad_file.txt.

[[ -a bad_file.txt ]]; echo $?

bad_file.txt doesn't exist. I think you're getting the hang of this. Using the same syntax, check if you have permissions to execute your countdown.sh file. You may want to look at that menu again.

[[ -x countdown.sh ]]; echo $?

You played around with a number of the expressions. View the help [[ expression ]] menu again that you looked at before to see a few more options. You can view the menu with just help [[.

help [[

As I mentioned before, you can test multiple expressions with && and ||. Enter [[ -x countdown.sh && 5 -le 4 ]]; echo $? in the terminal to test the file is executable by you and five is less than or equal to four.

[[ -x countdown.sh && 5 -le 4 ]]; echo $?

Both conditions weren't true, so the exit status was 1 for false. Try testing the same two conditions with the or operator.

[[ -x countdown.sh || 5 -le 4 ]]; echo $?

One of the conditions was true so it printed 0. I think that's enough of a detour. Back in your script, change the if condition to check if the first argument is greater than zero so you can be sure it's something you can count down from.

if [[ $1 -gt 0 ]]
then
  echo true
else
  echo false
fi

The condition you added checks if a positive integer was passed as an argument to the script and executes the then area. Change the existing echo command to print Include a positive integer as the first argument. if a positive integer is not used.

if [[ $1 -gt 0 ]]
then
  echo true
else
  echo Include a positive integer as the first argument.
fi

Run your script and use 1 as a first argument to make sure the condition is working.

./countdown.sh 1

Run it again and use anything but a positive integer as the only argument.

./countdown.sh -5

Looks like your if condition is working. Next, you want to loop over the argument and count down to zero from it. Check the help menu to see if there's any commands for this.

help

There's two for loops in there, you want the second one. Here's an example:

for (( i = 10; i > 0; i-- ))
do
  echo $i
done
The above creates a variable (i = 10), then prints it, subtracts one, and repeats until i is not greater than 0. So it prints 10 through 1. In the then area of your condition, replace the echo with a for loop that prints from the argument ($1) to 1.

if [[ $1 -gt 0 ]]
then
  for (( i = $1; i > 0; i-- ))
  do
    echo $i
  done
else
  echo Include a positive integer as the first argument.
fi

Run your script and use 10 as the first argument.

./countdown.sh 10

It works ðŸ˜„ But I want it to pause for one second between each number. Check the help menu again to see if there's any commands that might help.

help

I'm not seeing the command I was hoping to. These are the built-in commands, where are the rest? Type ls / to look around.

ls /

The / listed what's in the root of the file system. I see a bin folder, bin stands for binary. View what's in it with ls /bin.

ls /bin

These are some non built-in commands. There's quite a few that should look familiar. One is bash, that's the one you used for the shebang in your scripts. I see one called sleep. View the manual of it.

man sleep

At the top, it says you can pause execution for a number of seconds. Try it out by entering sleep 3 in the terminal.

sleep 3

That should work. In your for loop, use sleep to make the script pause for 1 second after each number is printed.

if [[ $1 -gt 0 ]]
then
  for (( i = $1; i > 0; i-- ))
  do
    echo $i
    sleep 1
  done
else
  echo Include a positive integer as the first argument.
fi

Run your script and use 3 as the first argument.

./countdown.sh 3

Awesome. Except it should print 0 instead of stopping at 1. Change the condition in your for loop so that it checks for i >= 0.

if [[ $1 -gt 0 ]]
then
  for (( i = $1; i >= 0; i-- ))
  do
    echo $i
    sleep 1
  done
else
  echo Include a positive integer as the first argument.
fi

Run your script with 3 as the argument again.

./countdown.sh 3

Excellent. I want it to display a title like the other script. Make it so that it prints ~~ Countdown Timer ~~ before anything else. Include a new line before and after it like you did for the other title.

echo -e "\n~~ Countdown Timer ~~\n"

Run your script and use 1 as the first argument again to see the title.

./countdown.sh 1

This is fun. You can create a multiline comment like this:

: '
  comment here
  more comment here
'
Comment out your for loop with a multiline comment. I want to try and do this with a while loop.

: '
if [[ $1 -gt 0 ]]
then
  for (( i = $1; i >= 0; i-- ))
  do
    echo $i
    sleep 1
  done
else
  echo Include a positive integer as the first argument.
fi
'

View the help menu for the while command to see if you can find anything.

help while

It shows the syntax. First, below your comment, create a variable named I that is set to the value of your first argument. It will start there, then on each iteration of the while loop you can subtract 1 from it until it reaches 0.

I=$1

The menu showed that you can make a while loop like this:
while [[ CONDITION ]]
do
  STATEMENTS
done
Add a while loop below the I variable you made. The condition should be $I -ge 0 and you should echo the I variable in the do statements.

while [[ $I -ge 0 ]]
do
  echo $I
done

I never changes here, so you would have an infinite loop. You can subtract one from I with double parenthesis (((...))) and the -- operator. In your while loop, add (( I-- )) after you echo $I to subtract one from I on each pass.

while [[ $I -ge 0 ]]
do
  echo $I
  (( I-- ))
done

The last thing to do is to add the sleep again. In your while loop, add the code to make it sleep for 1 second. Add the code after the (( I-- )).

while [[ $I -ge 0 ]]
do
  echo $I
  (( I-- ))
  sleep 1
done

Run the script and use 5 as the first argument.

./countdown.sh 5

I think the countdown timer is finished. Feel free to try it with some other arguments. The next one is a bingo number generator. Use touch to create bingo.sh in the same folder as the others.

touch bingo.sh

Give your file executable permissions like you did for the other two.

chmod +x bingo.sh

Add a shebang at the top of your new script. It should use bash again like other two.

#!/bin/bash

Add a comment below the shebang that says, Bingo Number Generator.

#Bingo Number Generator

Before I forget, use a single echo command to print a title for this program. It should say ~~ Bingo Number Generator ~~ with an empty line before and after it.

echo -e "\n~~ Bingo Number Generator ~~\n"

In your script, create a NUMBER variable that equals 5.

NUMBER=5

Below your new variable, use echo to print it to the screen.

echo $NUMBER

Run the script by executing it.

./bingo.sh

The numbers in bingo go up to 75, each number has a letter from the word bingo associated with it. You will need to randomly generate a number between 1 and 75. Bash may have something that can help you here. A shell comes with environment variables. View them by entering printenv in the terminal.

printenv

These are all environment variables, they are predefined and loaded with each shell. Most of them arenâ€™t very relevant, but itâ€™s nice to know theyâ€™re there. One of them is LANG. Use echo to print it in the terminal.

echo $LANG

View all variables in the shell with declare -p. -p stands for print

declare -p

This list includes all the environment variables, and any others that may have been created in the current shell. There's one named RANDOM. Use echo to print it in the terminal.

echo $RANDOM

Back in your script, use the RANDOM variable to set NUMBER to a random number instead of 5.

NUMBER=$RANDOM

Run the script a few times in a row to make sure it's working.

./bingo.sh

The RANDOM variable will generate a random number between 0 and 32767. You can use the modulus operator to make it in the range you want. In your script, change the NUMBER variable to $RANDOM%75.

NUMBER=$RANDOM%75

Run the script again.

./bingo.sh

Bash sees everything as a string so it just printed the %75 part literally. In the terminal, create an I variable equal to 0 (zero), so you can play with it and figure out how to do some calculations.

I=0

In the terminal, use echo to print your new variable.

echo $I

I noticed that you used double parenthesis in the while loop of your countdown timer to subtract one from I. Type (( I++ )) in the terminal to see if anything happens.

(( I++ ))

There was no output. Use echo to print I in the terminal again.

echo $I

The double parenthesis performed the calculation, changing the value of I from 0 to 1. Enter help let in the terminal to see the operators you can use with the double parenthesis.

help let

You used several of these now, including in the for loop from the countdown timer. Enter (( I += 10 )) in the terminal to increment I by 10. Note that you don't need to prepend variables with $ inside these parenthesis.

(( I += 10 ))

Use echo to print your I variable again.

echo $I

It should have printed 11 for the value of I. Using the double parenthesis like you have been is good for changing variable values or making comparisons. It makes the calculation in place and provides no output. If you want to make a calculation and do something with the result, add a $ in front like this: $(( ... )). Type $(( I + 4 )) in the terminal to see what happens.

$(( I + 4 ))

It should say, bash: 15: command not found. It replaced the command with the result of the calculation. Effectively, trying to run 15 as a command. Enter the same command, but put echo in front of it. The command was $(( I + 4 ))

echo $(( I + 4 ))

Again, it replaced the calculation with the result. So it was basically the same as if you entered echo 15. Use echo to print I to the screen again.

echo $I

It should still have printed 11 for I. See the hints if it didn't. These double parenthesis with a $ are how you can assign a variable to some calculation. In the terminal, create a J variable, and use the $(( ... )) syntax to set its value to I - 6.

J=$(( I - 6 ))

Use echo to print J.

echo $J

J should equal 5. For some more practice, use echo to print the value J * 5 + 25.

echo $(( J * 5 + 25 ))

It should have printed 50. Print J with echo again.

echo $J

So, as a reminder, (( ... )) will perform a calculation or operation and output nothing. $(( ... )) will replace the calculation with the result of it. You made a few variables in this shell, view them with declare -p.

declare -p

declare can be used to create variables, but you are just going to use it to view them for now. If you scroll up a little, you should find your I and J variables in there. View J with declare -p J.

declare -p J

I saw RANDOM in that list, too. View it with declare -p <variable> like you did for J.

declare -p RANDOM

Okay, I think I finally know how to get the random number for the Bingo Number Generator. Use echo and RANDOM % 75 to print a random number in the terminal.

echo $(( RANDOM % 75 ))

One tiny problem, that calculation will give a number between 0 and 74. Enter the same command in the terminal, but add 1 to the calculation to get a random number between 1 and 75.

echo $(( RANDOM % 75 + 1 ))

Back in your bingo.sh script, change the NUMBER variable so that it starts as a random number between 1 and 75 using the syntax you have been practicing.

NUMBER=$(( RANDOM % 75 + 1))

Run your script a few times in a row to make sure it's working.

./bingo.sh

Next, create a TEXT variable and set the value to "The next number is, ". When the script is finished, the output will be something like The next number is B:15.

TEXT="The next number is, "

The letter that goes with the random number depends on what the number is. If it's 15 or less, it will be a B. I saw some comparisons in the help let menu, take a look at it again.

help let

You used the double square brackets with your if statement in the last program, but you can use the double parenthesis with these operators as well. In your script, create an if statement that uses double parenthesis for the condition. Check if the number variable is less than or equal to 15. If it is, use your two variables to print The next number is, B:<number>.

if (( NUMBER <= 15 ))
then
  echo $TEXT B:$NUMBER
fi

if statements can have an "else if" area like this:
if (( CONDITION ))
then
  STATEMENTS
elif [[ CONDITION ]]
then
  STATEMENTS
fi

Using the double square brackets this time, add an elif condition that checks if the number variable is less than or equal to 30. If it is, use your two variables again to print The next number is, I:<number>

if (( NUMBER <= 15 ))
then
  echo $TEXT B:$NUMBER
elif [[ $NUMBER -le 30 ]]
then
  echo $TEXT I:$NUMBER
fi

You can add as many elif sections to an if statement as you want. Add another elif, below the last, one that uses the double parenthesis to check if the number variable is less than 46. If it is, use your two variables to print The next number is, N:<number>

if (( NUMBER <= 15 ))
then
  echo $TEXT B:$NUMBER
elif [[ $NUMBER -le 30 ]]
then
  echo $TEXT I:$NUMBER
elif (( NUMBER < 46 ))
then
  echo $TEXT N:$NUMBER
fi

Run your script if you want to see the output. It should print one of the sentences if the random number is less than 46. It may take a couple tries. Add another elif, below the last one, that uses double square brackets to check if the number variable is less than 61. If it is, use your two variables to print The next number is, G:<number>

if (( NUMBER <= 15 ))
then
  echo $TEXT B:$NUMBER
elif [[ $NUMBER -le 30 ]]
then
  echo $TEXT I:$NUMBER
elif (( NUMBER < 46 ))
then
  echo $TEXT N:$NUMBER
elif [[ $NUMBER -lt 61 ]]
then
  echo $TEXT G:$NUMBER
fi

One more case to handle. Add an else at the bottom of the if that uses your two variables to print The next number is, O:<number>.

if (( NUMBER <= 15 ))
then
  echo $TEXT B:$NUMBER
elif [[ $NUMBER -le 30 ]]
then
  echo $TEXT I:$NUMBER
elif (( NUMBER < 46 ))
then
  echo $TEXT N:$NUMBER
elif [[ $NUMBER -lt 61 ]]
then
  echo $TEXT G:$NUMBER
else
  echo $TEXT O:$NUMBER
fi

Run your script a few times and make sure it's working.

./bingo.sh

I think the generator is done ðŸ˜„ The next project is a fortune teller. Use the touch command to create fortune.sh in the same folder as the other scripts.

touch fortune.sh

Give your file executable permissions.

chmod +x fortune.sh

Add a shebang at the top of your new file that uses bash again.

#!/bin/bash

Add comment Program to tell a persons fortune

#Program to tell a persons fortune

Add a title for this one like the others. This one should say ~~ Fortune Teller ~~. Don't forget the empty line before and after it.

echo -e "\n~~ Fortune Teller ~~\n"

Run the file once to make sure it's working.

./fortune.sh

This program will have an array of responses. One will be printed randomly after a user inputs a question. Practice first ðŸ˜„ In the terminal, create an array like this: ARR=("a" "b" "c")

ARR=("a" "b" "c")

Each variable in the array is like any other variable, just combined into a single variable. In the terminal, print the second item in the array with echo ${ARR[1]}. Note that the first item would be index zero.

echo ${ARR[1]}

If you recall, you were able to print all the arguments to your countdown.sh script with echo $*. echo $@ would have worked as well. Similarly, you can use the * or @ to print your whole array. In the terminal, use echo to print all the items in your array.

echo ${ARR[*]}

The variable must be in that declare list. View your array variable using the declare command and the -p flag.

declare -p ARR

The -a next to it stands for array. In your script, create an array named RESPONSES. Give it these six values: Yes, No, Maybe, Outlook good, Don't count on it, and Ask again later.

RESPONSES=("Yes" "No" "Maybe" "Outlook good" "Don't count on it" "Ask again later")

In your script, use echo to print the last item in the array.

echo ${RESPONSES[5]}

Run it to see the output.

./fortune.sh

You will randomly print one of the values. In your script, create a variable named N. Set it equal to a random number between 0 and 5, the first and last index of the array.

N=$(( RANDOM % 6 ))

Change your echo command to print the item in the array whose index is the random number you generated.

echo ${RESPONSES[$N]}

You will create a function to generate an answer. Check the help menu to see if you can find anything.

help

See any that might help? There's one that says function. See if you can find out more about it.

help function

It looks like you can create a function like this:
FUNCTION_NAME() {
  STATEMENTS
}
Add an empty function named GET_FORTUNE to your script. Make sure the response you are printing is the last thing in the script.

GET_FORTUNE() {
}

In your function, use echo to print Ask a yes or no question:

GET_FORTUNE() {
  echo Ask a yes or no question:
}

Call your function by putting the name of it below where you create it. No $ needed. Make sure the response you are printing is at the bottom of the file.

GET_FORTUNE

Run your script to make sure it's working.

./fortune.sh

In your function after you print the sentence, use read to get user input into a variable named QUESTION.

GET_FORTUNE() {
  echo Ask a yes or no question:
  read QUESTION
}

Run the script again to test it out. Enter a question when it asks.

./fortune.sh

I want to make sure the input is a question. You are going to add a loop that asks for input until the input ends with a question mark. View the help menu to see if you can find an appropriate loop.

help

View more about that until command. That might be the one to use here.

help until


The until loop is very similar to the while loop you used. It will execute the loop until a condition is met. Here's an example:
until [[ CONDITION ]]
do
  STATEMENTS
done
Add an until loop below your function. Use the double brackets to check if QUESTION is equal to test?. Move the GET_FORTUNE function call to the statements area of the loop. It should run the function until you input test? as the question.

until [[ $QUESTION == test? ]]
do
  GET_FORTUNE
done

Run the script and enter something other than test?. Then enter test? after it asks for a question the second time.

./fortune.sh

View that help [[ expression ]] menu again. You need to find out how to test if the input ends with a question mark (?).

help [[ expression ]]

Let's play with these again. You can test if two strings are the same with ==. In the terminal, use the [[ ... ]]; echo $? syntax you used before to test if hello is equal to hello.

[[ hello == hello? ]]; echo $?

Exit status of 0, it was true. Using the same syntax, test if hello is equal to world.

[[ hello == world ]]; echo $?

False. An important operator in that menu is =~. It allows for pattern matching. Using the same syntax but with this operator, check if hello contains the pattern el.

[[ hello =~ el ]]; echo $?

True. The condition was checking for el within the word hello. Using the same syntax, check if hello world contains the pattern lo wor. You will need to put them both in quotes so it recognizes the spaces.

[[ "hello world" =~ "lo wor" ]]; echo $?

Your patterns have been checking for literal matches, el and lo wor. You can use regular expression characters as well, but you can't put the pattern in quotes when you do. Using the same syntax, check if hello world starts with an h by using ^h as the pattern.

[[ "hello world" =~ ^h ]]; echo $?

Do it again, but use ^h.+d$ as the pattern to see if the string starts with an h, has at least one character after it, and ends with a d.

[[ "hello world" =~ ^h.+d$ ]]; echo $?

In the terminal, create a variable named VAR that equals hello world.

VAR="hello world"

Use echo to print the variable you just created.

echo $VAR

Using the [[ ... ]]; echo $? syntax, check if your variable is equal to hello world.

[[ $VAR == "hello world" ]]; echo $?

Using the same syntax, check if your variable ends with ? by using the pattern \?$.

[[ $VAR =~ \?$ ]]; echo $?

It doesn't end with ?. Just to make sure I don't have the pattern wrong, check if test? ends with ?.

[[ test? =~ \?$ ]]; echo $?

I think that will work. Back in your script, change the until condition to see if your variable ends with ?.

until [[ $QUESTION =~ \?$ ]]
do
  GET_FORTUNE
done

Run the script and input something that doesn't end with ? the first time, then something that does the second.

./fortune.sh

I know that it asks the same thing if the input isn't what you want. You should let users know that it needs to end with ?. Add an if condition in your function that checks if [[ ! $1 ]]. Put the existing echo statement in the then area and make sure the existing read is below the whole if condition.

GET_FORTUNE() {
    if [[ ! $1 ]]
    then
      echo Ask a yes or no question:
    fi
    read QUESTION
  }

You can pass arguments to functions like you did with your script. This condition will check if one isn't passed and print the sentence. Add an else to your if. Use echo to print Try again. Make sure it ends with a question mark: if the condition fails.

GET_FORTUNE() {
    if [[ ! $1 ]]
    then
      echo Ask a yes or no question:
    else
      echo Try again. Make sure it ends with a question mark:
    fi
    read QUESTION
  }

Now, your function will print one thing if you pass it any argument, and something else if not. In the until loop, add again as an argument to where you call the function.

until [[ $QUESTION =~ \?$ ]]
do
  GET_FORTUNE again
done

Now, each time the function is called in the until loop, it will pass again as an argument and print the Try again... sentence. Before your until loop, call the function without an argument so the first time it runs, it prints the initial sentence.

GET_FORTUNE

Run the script and enter something without a question mark when it asks the first time. Use a question mark the second time.

./fortune.sh

Awesome. One last thing. Add an empty line in front of where you print the response.

echo -e "\n${RESPONSES[$N]}"

Run the script one more time to see if you like the output.

./fortune.sh

Excellent. One last program to make. Use touch to create a new file named five.sh in the same folder as the others.

touch five.sh

Give your file executable permissions.

chmod +x five.sh

Add a shebang to the new script that uses bash like the others.

#!/bin/bash

Add a comment below the shebang that says, Program to run my other four programs

#Program to run my other four programs

This program will run all the programs you made so far consecutively. Add the command to run the questionnaire.sh file.

./questionnaire.sh

Run the file to see if it works. Enter input when it asks.

./five.sh

Add commands to run the rest of your scripts in the file. They should be in this order: questionnaire, countdown, bingo, and fortune. Don't forget that your countdown.sh file needs an argument, so put a 3 next to it.

./countdown.sh 3
./bingo.sh
./fortune.sh

Okay, use clear to empty out what's in the terminal before the big moment.

clear

Run the script and enter input when it asks.

./five.sh

Cool. I think all the scripts are done. View the help menu again I want to explore one more thing.

help

View more about that type command.

help type

It says you can view the type of a command with type <command>. Just for fun, lets take a look at the type of a few different commands. View the type of echo.

type echo

View the type of the read command.

type read

View the type of if

type if

View the type of then

type then

Those were all from the help menu and described as a shell builtin or shell keyword. View the type of bash

type bash

That's the location of the bash command. View the type of psql.

type psql

It's showing the location of the commands. View the type of your ./five.sh file.

type ./five.sh

Last step, close the terminal with the exit command. Thanks and happy coding!

exit

